{
  "custom": {
    "parameterControlEnable": false,
    "unitParams": [],
    "unitParamsBoolean": [
      {
        "controlEnable": true,
        "tagName": "Enabled",
        "tagParentPath": "[default]Wolf Blass/Winery/Site Services/South Plant Room/Primary System/Units/HWP01/Unit Parameters"
      }
    ],
    "unitStatsBoolean": [
      {
        "controlEnable": false,
        "setpointWidth": "100px",
        "tagName": "Available",
        "tagParentPath": "[default]Wolf Blass/Winery/Site Services/South Plant Room/Primary System/Units/HWP01/Statistics",
        "unitsWidth": "30px",
        "useDeviceRanges": false
      }
    ],
    "unitStatsInteger": [],
    "unitTagPath": "[default]Wolf Blass/Winery/Site Services/South Plant Room/Primary System/Units/HWP01"
  },
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\tsystem.perspective.sendMessage(\u0027refresh-instances\u0027)"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "controlEnable": true,
    "unitName": "HWP01",
    "unitParentPath": "[default]Wolf Blass/Winery/Site Services/South Plant Room/Primary System/Units"
  },
  "propConfig": {
    "custom.parameterControlEnable": {
      "binding": {
        "config": {
          "path": "view.params.controlEnable"
        },
        "transforms": [
          {
            "expression": "{value} \u0026\u0026\r\ntry(hasRole(\"Engineer\", {session.props.auth.user.userName}, \u0027default\u0027), false)",
            "type": "expression"
          }
        ],
        "type": "property"
      },
      "onChange": {
        "enabled": null,
        "script": "\tsystem.perspective.sendMessage(\u0027refresh-instances\u0027)"
      },
      "persistent": true
    },
    "custom.unitParams": {
      "persistent": true
    },
    "custom.unitParamsBoolean": {
      "persistent": true
    },
    "custom.unitStatsBoolean": {
      "persistent": true
    },
    "custom.unitTagPath": {
      "binding": {
        "config": {
          "expression": "{view.params.unitParentPath} + \u0027/\u0027 + \r\n{view.params.unitName}"
        },
        "type": "expr"
      },
      "onChange": {
        "enabled": null,
        "script": "\tsystem.perspective.sendMessage(\u0027refresh-instances\u0027)\t"
      },
      "persistent": true
    },
    "params.controlEnable": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.unitName": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.unitParentPath": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 454,
      "width": 866
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Header"
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.deviceParentPath": {
            "binding": {
              "config": {
                "path": "view.custom.unitTagPath"
              },
              "type": "property"
            }
          },
          "props.params.overrides.subTitle": {
            "binding": {
              "config": {
                "fallbackDelay": 2.5,
                "mode": "indirect",
                "references": {
                  "unitTagPath": "{view.custom.unitTagPath}"
                },
                "tagPath": "{unitTagPath}/Common/Info/Description"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "params": {
            "deviceName": "Common",
            "overrides": {
              "title": ""
            }
          },
          "path": "Shared/General/Popups/_CommonParts/Header"
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "meta": {
                      "name": "Label Only"
                    },
                    "position": {
                      "basis": "320px",
                      "grow": 1
                    },
                    "props": {
                      "params": {
                        "hideLabel": false,
                        "labelOverride": "",
                        "tagName": "Contents"
                      },
                      "path": "Shared/Templates/Display/Label Only"
                    },
                    "type": "ia.display.view"
                  },
                  {
                    "meta": {
                      "name": "Label_0"
                    },
                    "position": {
                      "shrink": 0
                    },
                    "propConfig": {
                      "props.text": {
                        "binding": {
                          "config": {
                            "path": "parent.custom.contents"
                          },
                          "type": "property"
                        }
                      }
                    },
                    "type": "ia.display.label"
                  }
                ],
                "meta": {
                  "name": "FlexContainer"
                },
                "position": {
                  "shrink": 0
                },
                "propConfig": {
                  "custom.contents": {
                    "binding": {
                      "config": {
                        "fallbackDelay": 2.5,
                        "mode": "indirect",
                        "references": {
                          "1": "{view.custom.unitTagPath}"
                        },
                        "tagPath": "{1}/Common/Contents Desc"
                      },
                      "type": "tag"
                    }
                  },
                  "position.display": {
                    "binding": {
                      "config": {
                        "expression": "isGood({this.custom.contents})  \u0026\u0026\r\n{this.custom.contents} !\u003d \"INVISIBLE\""
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "style": {
                    "classes": "Tables/Row",
                    "overflow": "hidden"
                  }
                },
                "type": "ia.container.flex"
              },
              {
                "meta": {
                  "name": "StatisticsViewRepeater"
                },
                "position": {
                  "basis": "138px",
                  "grow": 1,
                  "shrink": 0
                },
                "propConfig": {
                  "props.instances": {
                    "binding": {
                      "config": {
                        "path": "view.custom.unitStatsBoolean"
                      },
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "direction": "column",
                  "elementStyle": {
                    "marginBottom": "5px"
                  },
                  "path": "Shared/Templates/Display/Check w Label",
                  "useDefaultViewWidth": false
                },
                "type": "ia.display.flex-repeater"
              },
              {
                "meta": {
                  "name": "StatisticsViewRepeater_0"
                },
                "position": {
                  "basis": "320px",
                  "grow": 1
                },
                "propConfig": {
                  "props.instances": {
                    "binding": {
                      "config": {
                        "path": "view.custom.unitStatsInteger"
                      },
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "direction": "column",
                  "elementStyle": {
                    "marginBottom": "5px"
                  },
                  "path": "Shared/Templates/Display/Analogue Value w Label",
                  "useDefaultViewWidth": false
                },
                "type": "ia.display.flex-repeater"
              },
              {
                "events": {
                  "component": {
                    "onActionPerformed": {
                      "config": {
                        "script": "\tsystem.tag.writeAsync([self.view.custom.unitTagPath + \u0027/Common/All to Auto CMD\u0027], [1])"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Button"
                },
                "position": {
                  "basis": "45px",
                  "shrink": 0
                },
                "propConfig": {
                  "props.enabled": {
                    "binding": {
                      "config": {
                        "path": "view.params.controlEnable"
                      },
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "image": {
                    "icon": {
                      "path": "material/sync",
                      "style": {
                        "height": "24px",
                        "width": "2rem"
                      }
                    },
                    "position": "right"
                  },
                  "style": {
                    "classes": "Buttons/Body Buttons/Text Tables/Row"
                  },
                  "text": "ALL DEVICES TO AUTO"
                },
                "type": "ia.input.button"
              },
              {
                "events": {
                  "component": {
                    "onActionPerformed": {
                      "config": {
                        "script": "\tsystem.tag.writeAsync([self.view.custom.unitTagPath + \u0027/Common/All to Manual CMD\u0027], [1])"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Button_0"
                },
                "position": {
                  "basis": "45px",
                  "shrink": 0
                },
                "props": {
                  "image": {
                    "icon": {
                      "path": "material/pan_tool",
                      "style": {
                        "height": "24px",
                        "width": "2rem"
                      }
                    },
                    "position": "right"
                  },
                  "style": {
                    "classes": "Buttons/Body Buttons/Text Tables/Row"
                  },
                  "text": "ALL DEVICES TO MANUAL"
                },
                "type": "ia.input.button"
              }
            ],
            "meta": {
              "name": "FlexContainer"
            },
            "position": {
              "basis": "300px",
              "shrink": 0
            },
            "props": {
              "direction": "column",
              "style": {
                "padding": "5px"
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Label"
                },
                "position": {
                  "basis": "32px",
                  "shrink": 0
                },
                "props": {
                  "style": {
                    "classes": "Cards/Heading3"
                  },
                  "text": "Parameters"
                },
                "type": "ia.display.label"
              },
              {
                "meta": {
                  "name": "FlexRepeater_0"
                },
                "position": {
                  "shrink": 0
                },
                "propConfig": {
                  "props.instances": {
                    "binding": {
                      "config": {
                        "path": "view.custom.unitParamsBoolean"
                      },
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "direction": "column",
                  "elementStyle": {
                    "marginBottom": "10px"
                  },
                  "path": "Shared/Templates/Display/Boolean Setpoint w Label",
                  "useDefaultViewWidth": false
                },
                "type": "ia.display.flex-repeater"
              },
              {
                "meta": {
                  "name": "FlexRepeater"
                },
                "position": {
                  "shrink": 0
                },
                "propConfig": {
                  "props.instances": {
                    "binding": {
                      "config": {
                        "path": "view.custom.unitParams"
                      },
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "direction": "column",
                  "elementStyle": {
                    "marginBottom": "10px"
                  },
                  "path": "Shared/Templates/Display/Analogue Setpoint w Label",
                  "useDefaultViewWidth": false
                },
                "type": "ia.display.flex-repeater"
              }
            ],
            "meta": {
              "name": "FlexContainer_0"
            },
            "position": {
              "basis": "200px",
              "grow": 1
            },
            "props": {
              "direction": "column",
              "style": {
                "borderLeftColor": "#2B2B2B",
                "borderLeftStyle": "solid",
                "borderLeftWidth": "1px",
                "padding": "5px"
              }
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "FlexContainer"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "props": {
          "style": {
            "backgroundColor": "#EEECE8",
            "paddingBottom": "5px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\tsystem.perspective.closePopup(\u0027\u0027)"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Button"
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "props": {
          "image": {
            "icon": {
              "path": "material/close"
            }
          },
          "style": {
            "borderBottomLeftRadius": 0,
            "borderBottomRightRadius": 0,
            "borderBottomStyle": "none",
            "borderLeftStyle": "none",
            "borderRightStyle": "none",
            "borderTopLeftRadius": 0,
            "borderTopRightRadius": 0,
            "classes": "Buttons/Body Buttons/Text"
          },
          "text": "Exit"
        },
        "type": "ia.input.button"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column"
    },
    "scripts": {
      "customMethods": [
        {
          "name": "refreshParams",
          "params": [],
          "script": "\tparamPath\u003dself.view.custom.unitTagPath + \u0027/Unit Parameters\u0027\n\t\n\tself.view.custom.unitParams \u003d []\n\t\n\tparamTags \u003d []\n\t\n\tfor dataType in [\u0027Int4\u0027, \u0027Int8\u0027, \u0027Float4\u0027, \u0027Float8\u0027]:\n\t\tparamTags.extend(shared.tag.browseTags(paramPath,filter\u003d{\u0027dataType\u0027:dataType}))\n\t\n\t#create Opc item paths and extract UP.XX\n\tparamTagOpcItemPaths \u003d [str(tag[\u0027fullPath\u0027]) + \u0027.OPCItemPath\u0027 for tag in paramTags]\n\tparamTagOpcItemPathVals \u003d [tag.value for tag in system.tag.readBlocking(paramTagOpcItemPaths)]\n\tparamTagOpcItemPathVals \u003d [OpcItemPath.split(\u0027.\u0027)[-1] for OpcItemPath in paramTagOpcItemPathVals]\n\t\n\tparamTagParentPaths \u003d [str(tag[\u0027fullPath\u0027]).replace(\u0027/\u0027 + tag[\u0027name\u0027], \u0027\u0027) for tag in paramTags]\n\tparamTagNames \u003d [tag[\u0027name\u0027] for tag in paramTags]\n\t\n\t#zip UP.XX with paramTagNames and sort by UP.XX, then extract just paramTagNames\n\tparamTagOpcItemPathValsSorted \u003d sorted(zip(paramTagOpcItemPathVals, paramTagNames),key\u003dlambda x:x[0])\t\n\tparamTagNames \u003d [i[1] for i in paramTagOpcItemPathValsSorted]\n\t\n\tcontrolEnable \u003d self.view.custom.parameterControlEnable\n\t\t\n\tinstances \u003d []\n\tfor param in zip(paramTagParentPaths, paramTagNames):\n\t\tinstance \u003d {\n\t\t\t\t\t  \"controlEnable\": controlEnable,\n\t\t\t\t\t  \"setpointWidth\": \"100px\",\n\t\t\t\t\t  \"tagName\": param[1],\n\t\t\t\t\t  \"tagParentPath\": param[0],\n\t\t\t\t\t  \"unitsWidth\": \"30px\",\n\t\t\t\t\t  \"useDeviceRanges\": False\n\t\t\t\t\t}\n\t\tinstances.append(instance)\n\t\n\tself.view.custom.unitParams \u003d instances\n\t\n\t#create Boolean parameters\n\t\n\tself.view.custom.unitParamsBoolean \u003d []\n\t\n\tbooleanParamTags \u003d shared.tag.browseTags(paramPath,filter\u003d{\u0027dataType\u0027:\u0027Boolean\u0027})\n\tbooleanParamTagParentPaths \u003d [str(tag[\u0027fullPath\u0027]).replace(\u0027/\u0027 + tag[\u0027name\u0027], \u0027\u0027) for tag in booleanParamTags]\n\tbooleanParamTagNames \u003d [tag[\u0027name\u0027] for tag in booleanParamTags]\n\t\n\tinstances \u003d []\n\tfor stat in zip(booleanParamTagParentPaths, booleanParamTagNames):\n\t\tinstance \u003d {\n\t\t\t\t\t  \"controlEnable\": controlEnable,\n\t\t\t\t\t  \"tagName\": stat[1],\n\t\t\t\t\t  \"tagParentPath\": stat[0],\n\t\t\t\t\t}\n\t\tinstances.append(instance)\n\tself.view.custom.unitParamsBoolean \u003d instances"
        },
        {
          "name": "refreshStats",
          "params": [],
          "script": "\t##TO DO: create instances for unitStatsInteger\n\t\n\tself.view.custom.unitStatsBoolean \u003d []\n\tstatsTags \u003d shared.tag.browseTags(self.view.custom.unitTagPath + \u0027/Statistics\u0027,filter\u003d{\u0027dataType\u0027:\u0027Boolean\u0027})\n\tstatsTagParentPaths \u003d [str(tag[\u0027fullPath\u0027]).replace(\u0027/\u0027 + tag[\u0027name\u0027], \u0027\u0027) for tag in statsTags]\n\tstatsTagNames \u003d [tag[\u0027name\u0027] for tag in statsTags]\n\t\n\tstatsPath \u003d self.view.custom.unitTagPath + \u0027/Statistics\u0027\n\t\n\tinstances \u003d []\n\tfor stat in zip(statsTagParentPaths, statsTagNames):\n\t\tinstance \u003d {\n\t\t\t\t\t  \"controlEnable\": False,\n\t\t\t\t\t  \"setpointWidth\": \"100px\",\n\t\t\t\t\t  \"tagName\": stat[1],\n\t\t\t\t\t  \"tagParentPath\": stat[0],\n\t\t\t\t\t  \"unitsWidth\": \"30px\",\n\t\t\t\t\t  \"useDeviceRanges\": False\n\t\t\t\t\t}\n\t\tinstances.append(instance)\n\tself.view.custom.unitStatsBoolean \u003d instances\n\t\n\tself.view.custom.unitStatsInteger \u003d []\n\tstatsTags \u003d []\n\tfor dataType in [\u0027Int4\u0027, \u0027Int8\u0027, \u0027Float4\u0027, \u0027Float8\u0027]:\n\t\tstatsTags.extend(shared.tag.browseTags(statsPath,filter\u003d{\u0027dataType\u0027:dataType}))\n\n\tstatsTagParentPaths \u003d [str(tag[\u0027fullPath\u0027]).replace(\u0027/\u0027 + tag[\u0027name\u0027], \u0027\u0027) for tag in statsTags]\n\tstatsTagNames \u003d [tag[\u0027name\u0027] for tag in statsTags]\n\t\n\tinstances \u003d []\n\tfor stat in zip(statsTagParentPaths, statsTagNames):\n\t\tinstance \u003d {\n\t\t\t\t\t  \"controlEnable\": False,\n\t\t\t\t\t  \"setpointWidth\": \"100px\",\n\t\t\t\t\t  \"tagName\": stat[1],\n\t\t\t\t\t  \"tagParentPath\": stat[0],\n\t\t\t\t\t  \"unitsWidth\": \"auto\",\n\t\t\t\t\t  \"useDeviceRanges\": False\n\t\t\t\t\t}\n\t\tinstances.append(instance)\n\tself.view.custom.unitStatsInteger \u003d instances"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "refresh-instances",
          "pageScope": true,
          "script": "\tself.refreshParams()\n\tself.refreshStats()",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}